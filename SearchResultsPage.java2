package GRDB2;

import GRDB2.html.*;
import java.lang.Integer;
/**
 */
public class SearchResultsPage extends HtmlPage
{
    public SearchResultsPage (String sServletAddress,
                                MetricRecord records[], String sSearchText)
    {
        super();


        HtmlHead head = new HtmlHead("Search results for: " + sSearchText);

//-----------------------------------------------------------------------------
// Body
//-----------------------------------------------------------------------------
        HtmlBody body = new HtmlBody();

        HtmlText title = new HtmlText("Interactive Database of Exact Solutions of Einstein's Field Equations", "H2");
        title.addFormatTag("CENTER");
        body.addComponent(title);

        HtmlText authors = new HtmlText("Developed by Mustapha Ishak and Kayll Lake, Queen's University.", "H4");
        authors.addFormatTag("CENTER");
        body.addComponent(authors);


        HtmlText FutureUsage = new HtmlText(" ");
	String Spaces = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp&nbsp;";

        // create anchors/links
        HtmlAnchor  aClear = new HtmlAnchor("",
                            new HtmlText("Clear Results"),
                            sServletAddress);

        String sListAllMetricsLink = sServletAddress + "?" +
                                   GRDBProtocol.COMMAND + "=" +
                                   GRDBProtocol.LIST_ALL;
        HtmlAnchor  aListAllMetrics = new HtmlAnchor("",
                                    new HtmlText("List All Metrics"),
                                    sListAllMetricsLink);

        String sNewMetricLink = sServletAddress + "?" +
                              GRDBProtocol.COMMAND + "=" +
                              GRDBProtocol.NEW;
        HtmlAnchor  aNewMetric = new HtmlAnchor("",
                               new HtmlText("Add New Metric (Internal)"),
                               sNewMetricLink);

        String sAbout = "http://130.15.26.66/~postgres/aboutgrdb.html";
        HtmlAnchor  aAbout = new HtmlAnchor("",
                               new HtmlText("About The Database"),
                               sAbout);

        String sHow = "http://130.15.26.66/~postgres/howgrdb.html";
        HtmlAnchor  aHow = new HtmlAnchor("",
                               new HtmlText("&nbsp;&nbsp;"+"How To Use The Database"+"&nbsp;&nbsp;"),
                               sHow);

        String sPublicInput = "http://130.15.26.66/~lake/metricinput.html";
        HtmlAnchor  aPublicInput = new HtmlAnchor("",
                               new HtmlText("&nbsp;&nbsp;"+"Public Metric Input Page"+"&nbsp;&nbsp;"),
                               sPublicInput);

//----------------------------------------------------------------------------
// add operations and help items to Menu Here
//----------------------------------------------------------------------------

        HtmlTableWithBorder Operations = new HtmlTableWithBorder();
        HtmlTableRow OperRows[] = new HtmlTableRow[10];

        HtmlTableCell cells[][] = new HtmlTableCell[10][2];

        OperRows[0] = new HtmlTableRow();
        OperRows[1] = new HtmlTableRow();
        OperRows[2] = new HtmlTableRow();
        OperRows[3] = new HtmlTableRow();
        OperRows[4] = new HtmlTableRow();
        OperRows[5] = new HtmlTableRow();
        OperRows[6] = new HtmlTableRow();
        OperRows[7] = new HtmlTableRow();
        OperRows[8] = new HtmlTableRow();
        OperRows[9] = new HtmlTableRow();

        cells[0][0] = new HtmlTableCell(aAbout);
        cells[1][0] = new HtmlTableCell(aHow);
        cells[2][0] = new HtmlTableCell(aClear);
        cells[3][0] = new HtmlTableCell(FutureUsage);
        cells[4][0] = new HtmlTableCell(FutureUsage);
        cells[5][0] = new HtmlTableCell(FutureUsage);
        cells[6][0] = new HtmlTableCell(FutureUsage);
        cells[7][0] = new HtmlTableCell(FutureUsage);
        cells[8][0] = new HtmlTableCell(FutureUsage);
        cells[9][0] = new HtmlTableCell(FutureUsage);


        cells[0][1] = new HtmlTableCell(aListAllMetrics);
        cells[1][1] = new HtmlTableCell(aPublicInput);
        cells[2][1] = new HtmlTableCell(aNewMetric);
        cells[3][1] = new HtmlTableCell(FutureUsage);
        cells[4][1] = new HtmlTableCell(FutureUsage);
        cells[5][1] = new HtmlTableCell(FutureUsage);
        cells[6][1] = new HtmlTableCell(FutureUsage);
        cells[7][1] = new HtmlTableCell(FutureUsage);
        cells[8][1] = new HtmlTableCell(FutureUsage);
        cells[9][1] = new HtmlTableCell(FutureUsage);



        OperRows[0].addParameter("ALIGN=\"CENTER\"");
        OperRows[0].addCell(cells[0][0]);
        OperRows[0].addCell(cells[0][1]);
        OperRows[1].addParameter("ALIGN=\"CENTER\"");
        OperRows[1].addCell(cells[1][0]);
        OperRows[1].addCell(cells[1][1]);
        OperRows[2].addParameter("ALIGN=\"CENTER\"");
        OperRows[2].addCell(cells[2][0]);
        OperRows[2].addCell(cells[2][1]);
        OperRows[3].addParameter("ALIGN=\"CENTER\"");
        OperRows[3].addCell(cells[3][0]);
        OperRows[3].addCell(cells[3][1]);
        OperRows[4].addParameter("ALIGN=\"CENTER\"");
        OperRows[4].addCell(cells[4][0]);
        OperRows[4].addCell(cells[4][1]);
        OperRows[5].addParameter("ALIGN=\"CENTER\"");
        OperRows[5].addCell(cells[5][0]);
        OperRows[5].addCell(cells[5][1]);
        OperRows[6].addParameter("ALIGN=\"CENTER\"");
        OperRows[6].addCell(cells[6][0]);
        OperRows[6].addCell(cells[6][1]);
        OperRows[7].addParameter("ALIGN=\"CENTER\"");
        OperRows[7].addCell(cells[7][0]);
        OperRows[7].addCell(cells[7][1]);
        OperRows[8].addParameter("ALIGN=\"CENTER\"");
        OperRows[8].addCell(cells[8][0]);
        OperRows[8].addCell(cells[8][1]);
        OperRows[9].addParameter("ALIGN=\"CENTER\"");
        OperRows[9].addCell(cells[9][0]);
        OperRows[9].addCell(cells[9][1]);

        Operations.addRow(OperRows[0]);
        Operations.addRow(OperRows[1]);
        Operations.addRow(OperRows[2]);
/*
        Operations.addRow(OperRows[3]);
        Operations.addRow(OperRows[4]);
        Operations.addRow(OperRows[5]);
        Operations.addRow(OperRows[6]);
        Operations.addRow(OperRows[7]);
        Operations.addRow(OperRows[8]);
        Operations.addRow(OperRows[9]);
*/
        body.addHtml("<CENTER>");
        body.addComponent(Operations);

//----------------------------------------------------------------------------
//  Search Form Here 
//----------------------------------------------------------------------------

        MetricsSearchForm  searchForm = new MetricsSearchForm(sServletAddress);
        body.addComponent(searchForm);
        body.addHtml("<HR SIZE=2>"); 

//----------------------------------------------------------------------------
// Calculator GRTensorJ Applet
//----------------------------------------------------------------------------
        CalculatorForm  Calcform = new CalculatorForm(sServletAddress);
        body.addComponent(Calcform);
	body.addHtml("</CENTER>");
        body.addHtml("<HR SIZE=2>"); 

//----------------------------------------------------------------------------
//  Petrov Form Here 
//----------------------------------------------------------------------------

//        PetrovSearchForm  petrovForm = new PetrovSearchForm(sServletAddress);
//        body.addComponent(petrovForm);
//        body.addHtml("<HR SIZE=2>"); 


//----------------------------------------------------------------------------
//  Results Display Area 
//----------------------------------------------------------------------------

        HtmlText subtitle1 = new HtmlText("Search Results From Database");
        subtitle1.addFormatTag("B");
        body.addComponent(subtitle1);


        if (records == null || records.length == 0)
        {
            HtmlText nomatches =
                new HtmlText("Sorry, no matches were found.");
            nomatches.addFormatTag("B");
            nomatches.addFormatTag("P");
            body.addComponent(nomatches);
        }
        else
        {
            HtmlTableWithBorder results = new HtmlTableWithBorder();
            HtmlTableRow rows[] = new HtmlTableRow[records.length + 1];

            rows[0] = new HtmlTableRow();
           rows[0].addCell(new HtmlTableCell(new HtmlText("Metric Name"),true));
           rows[0].addCell(new HtmlTableCell(new HtmlText("Metric Information"),true));
            results.addRow(rows[0]);

            for (int iCount = 1; iCount < records.length; iCount++)
            {
      
                String sQueryString =
                            "?" + GRDBProtocol.COMMAND +
                            "=" + GRDBProtocol.GET +
                            "&metricid=" + records[iCount].getmetricid();
                HtmlAnchor anchor =
                        	   new HtmlAnchor("",
                                   new HtmlText(records[iCount].getmetricname()),
                                   sServletAddress + sQueryString);

                rows[iCount + 1] = new HtmlTableRow();
                rows[iCount + 1].addCell(new HtmlTableCell(anchor));
                rows[iCount + 1].addCell(new HtmlTableCell(
                  new HtmlText("<BR>"+records[iCount].getmetricinfo()+"<BR>")));
                results.addRow(rows[iCount + 1]);
            }

            body.addComponent(results);
        body.addHtml("</CENTER>");
        }
        setHead(head);
        setBody(body);
    }

}

/*        String sOverview = "This page will let you search for a metric " +
                           "by the name or a sub-string of the name " +
                           "You can also add a new metric, update or "+
				"delete a metric (restricted), " +
			   " or list all metric currently " +
                           " in the database.";
        HtmlText overview = new HtmlText(sOverview, "P");
        body.addComponent(overview);
        body.addHtml("<HR SIZE=3>");
*/
